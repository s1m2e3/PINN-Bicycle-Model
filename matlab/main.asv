%% Define mass, car length and desired speed
m = 1500;
cL = 4.9;
tS = 20;
%% Define total number of seconds, number of states and co-states
time = 2;
numberStates = 4;
numberCostates = 4;

%% Get predictions and add constraints
filename = "../left_turn_through.csv";
discretizedTime = time*10;
nodes = 10;
% nodes = 5 ;
t = linspace(0,time,discretizedTime);
c = (1+1)/(t(end)-t(1));
t = -1+c*(t-t(1));
k=3;
distanceThreshold =  5;
conflictX = 69;
conflictY = 589;
vehicleMovement = "through";
W = randn([nodes 1]);
b = randn([nodes 1]);
[predXThrough, predYThrough, predThetaThrough, predDeltaThrough, predLambdaXThrough, predLambdaYThrough, predLambdaThetaThrough, predLambdaDeltaThrough, dPredXThrough, dPredYThrough, dPredThetaThrough, dPredDeltaThrough, dPredLambdaXThrough, dPredLambdaYThrough, dPredLambdaThetaThrough, dPredLambdaDeltaThrough,betasThrough]=predictions(numberStates,numberCostates,filename,vehicleMovement,discretizedTime,nodes,W,b,c,t,k);
vehicleMovement = "left turning";
W = randn([nodes 1]);
b = randn([nodes 1]);
[predXTurning, predYTurning, predThetaTurning, predDeltaTurning, predLambdaXTurning, predLambdaYTurning, predLambdaThetaTurning, predLambdaDeltaTurning, dPredXTurning, dPredYTurning, dPredThetaTurning, dPredDeltaTurning, dPredLambdaXTurning, dPredLambdaYTurning, dPredLambdaThetaTurning, dPredLambdaDeltaTurning,betasTurning]=predictions(numberStates,numberCostates,filename,vehicleMovement,discretizedTime,nodes,W,b,c,t,k);
%% Couple and Test numerically
[predXTurning,predYTurning,dPredXTurning,dPredYTurning] = couple(predXThrough,dPredXThrough,predYThrough,dPredYThrough,predXTurning,dPredXTurning,predYTurning,dPredYTurning,distanceThreshold,k,conflictX,conflictY);

%% Define Hamiltonian with respect to co-states and 
% syms theta delta lambdaX lambdaY lambdaTheta lambdaDelta;
% VThrough = -(-2*tS+predLambdaXThrough.*cos(predThetaThrough)+predLambdaYThrough.*sin(predThetaThrough)+predLambdaThetaThrough/cL.*tan(predDeltaThrough))/(m+2); 
% VTurning = -(-2*tS+predLambdaXTurning.*cos(predThetaTurning)+predLambdaYTurning.*sin(predThetaTurning)+predLambdaThetaTurning/cL.*tan(predDeltaTurning))/(m+2); 
% PhiThrough = -predLambdaDeltaThrough;
% PhiTurning = -predLambdaDeltaTurning;

%% get differential equations
syms lambdaX lambdaY lambdaTheta lambdaDelta theta delta x y
V = -(-2*tS+lambdaX*cos(theta)+lambdaY*sin(theta)+lambdaTheta/cL*tan(delta))/(m+2); 
Phi=  - lambdaDelta;
H =  1/2*Phi.^2 + 1/2*m*V.^2+lambdaX.*V.*cos(theta)+lambdaY*V*sin(theta)+lambdaTheta/cL.*V.*tan(delta) ...
+lambdaDelta*Phi;
xDot = diff(H,lambdaX);
yDot = diff(H,lambdaY);
thetaDot = diff(H,lambdaTheta);
deltaDot = diff(H,lambdaDelta);
lambdaXDot= diff(-H,x);
lambdaYDot = diff(-H,y);
lambdaThetaDot = diff(-H,theta);
lambdaDeltaDot = diff(-H,delta);
%% Replace Differential Equations
xDotThrough = subs(xDot,symvar(xDot),{predDeltaThrough,predLambdaThetaThrough,predLambdaXThrough,predLambdaYThrough,predThetaThrough});
yDotThrough = subs(yDot,symvar(yDot),{predDeltaThrough,predLambdaThetaThrough,predLambdaXThrough,predLambdaYThrough,predThetaThrough});    
thetaDotThrough = subs(thetaDot,symvar(thetaDot),{predDeltaThrough,predLambdaThetaThrough,predLambdaXThrough,predLambdaYThrough,predThetaThrough});
deltaDotThrough = subs(deltaDot,symvar(deltaDot),{predLambdaDeltaThrough});
lambdaXDotThrough = subs(lambdaXDot,symvar(lambdaXDot),{predDeltaThrough,predLambdaThetaThrough,predLambdaXThrough,predLambdaYThrough,predThetaThrough});
lambdaYDotThrough = subs(lambdaYDot,symvar(lambdaYDot),{predDeltaThrough,predLambdaThetaThrough,predLambdaXThrough,predLambdaYThrough,predThetaThrough});
lambdaThetaDotThrough = subs(lambdaThetaDot,symvar(lambdaThetaDot),{predDeltaThrough,predLambdaThetaThrough,predLambdaXThrough,predLambdaYThrough,predThetaThrough});
lambdaDeltaDotThrough = subs(lambdaDeltaDot,symvar(lambdaDeltaDot),{predDeltaThrough,predLambdaThetaThrough,predLambdaXThrough,predLambdaYThrough,predThetaThrough});

xDotTurning = subs(xDot,symvar(xDot),{predDeltaTurning,predLambdaThetaTurning,predLambdaXTurning,predLambdaYTurning,predThetaTurning});
yDotTurning = subs(yDot,symvar(yDot),{predDeltaTurning,predLambdaThetaTurning,predLambdaXTurning,predLambdaYTurning,predThetaTurning});    
thetaDotTurning = subs(thetaDot,symvar(thetaDot),{predDeltaTurning,predLambdaThetaTurning,predLambdaXTurning,predLambdaYTurning,predThetaTurning});
deltaDotTurning = subs(deltaDot,symvar(deltaDot),{predLambdaDeltaTurning});
lambdaXDotTurning = subs(lambdaXDot,symvar(lambdaXDot),{predDeltaTurning,predLambdaThetaTurning,predLambdaXTurning,predLambdaYTurning,predThetaTurning});
lambdaYDotTurning = subs(lambdaYDot,symvar(lambdaYDot),{predDeltaTurning,predLambdaThetaTurning,predLambdaXTurning,predLambdaYTurning,predThetaTurning});
lambdaThetaDotTurning = subs(lambdaThetaDot,symvar(lambdaThetaDot),{predDeltaTurning,predLambdaThetaTurning,predLambdaXTurning,predLambdaYTurning,predThetaTurning});
lambdaDeltaDotTurning = subs(lambdaDeltaDot,symvar(lambdaDeltaDot),{predDeltaTurning,predLambdaThetaTurning,predLambdaXTurning,predLambdaYTurning,predThetaTurning});

%% Define operations and predictions
losses = getLosses(dPredXThrough, dPredYThrough, dPredThetaThrough, dPredDeltaThrough, dPredLambdaXThrough, dPredLambdaYThrough, dPredLambdaThetaThrough, dPredLambdaDeltaThrough, xDotThrough, yDotThrough, thetaDotThrough, deltaDotThrough, lambdaXDotThrough, lambdaYDotThrough, lambdaThetaDotThrough, lambdaDeltaDotThrough,dPredXTurning, dPredYTurning, dPredThetaTurning, dPredDeltaTurning, dPredLambdaXTurning, dPredLambdaYTurning, dPredLambdaThetaTurning, dPredLambdaDeltaTurning, xDotTurning, yDotTurning, thetaDotTurning, deltaDotTurning, lambdaXDotTurning, lambdaYDotTurning, lambdaThetaDotTurning, lambdaDeltaDotTurning);
betas = cat(1,betasThrough,betasTurning);
%% Define Jacobian 
storedJacobian = jacobian(losses,betas);
%% Create matlabFunctions
matlabFunction(losses,"File","losses");
matlabFunction(storedJacobian,"File","jacobians");

% %% Define as function h
% finalBetasTurning = randn(size(betasTurning));
% finalBetasThrough = randn(size(betasThrough));
% for i =1:100
%     evalLosses = double(subs(lossesThrough,betasThrough,finalBetasThrough));
%     evalJacobian = double(subs(storedJacobianThrough,betasThrough,finalBetasThrough));
%     delta=pinv(evalJacobian)*evalLosses;
%     finalBetasThrough = finalBetasThrough - 0.1*delta;
%     mean(evalLosses.^2)
% %     evalLosses = double(subs(lossesTurning,betasTurning,finalBetasTurning));
% %     evalJacobian = double(subs(storedJacobianTurning,betasTurning,finalBetasTurning));
% %     delta=pinv(evalJacobian)*evalLosses;
% %     finalBetasTurning = finalBetasTurning - 0.1*delta;
% %     mean(evalLosses.^2)
%     
% end
